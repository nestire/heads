version: 2
jobs:
  build:
    docker:
      - image: debian:10
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y build-essential zlib1g-dev uuid-dev libdigest-sha-perl libelf-dev bc bzip2 bison flex git gnupg iasl m4 nasm patch python wget gnat cpio ccache pkg-config cmake libusb-1.0-0-dev autoconf texinfo ncurses-dev doxygen graphviz udev libudev1 libudev-dev automake libtool
      - checkout

      - run:
          name: git reset
          command: |
            git reset --hard "$CIRCLE_SHA1" \

      - run:
          name: Creating all modules and patches digest
          command: |
            find ./patches/ ./modules/ -type f | sort -h |xargs sha256sum > /tmp/all_modules_and_patches.sha256sums \

      - run:
          name: Creating musl-cross-make and musl-cross-make patches digest
          command: |
            find ./patches/musl-cross-* modules/musl-cross* -type f | sort -h | xargs sha256sum > /tmp/musl-cross_module_and_patches.sha256sums \


      - restore_cache:
          keys:
            #Restore existing cache for modules checksums validated to be exactly the same as in github current commit
            - heads-modules-and-patches-{{ checksum "/tmp/all_modules_and_patches.sha256sums" }}{{ .Environment.CACHE_VERSION }}
            #If precedent fails. Restore cache for musl-cross module checksum validated to be exactly the same as in github current commit
            - heads-cross-musl-{{ checksum "/tmp/musl-cross_module_and_patches.sha256sums" }}{{ .Environment.CACHE_VERSION }}

      - run:
         name: x230-nkstorecli
         command: |
           rm -rf build/x230-nkstorecli/* build/log/* && make --load 2 \
               V=1 \
               BOARD=x230-nkstorecli \
         no_output_timeout: 3h
      - run:
          name: collect all .a files and pack them together
          command: |
            mkdir out && \
            find . -name "*.a" | xargs tar czfv out/static-libs.1.tgz && \
            cp crossgcc/x86_64-linux-musl/lib64/libstdc++.a out/libstdc++.1.a && \
            tar czfv out/install.1.tgz install && \
            rm -rf build && \
            make --load 2 V=1 BOARD=x230-nkstorecli && \
            find . -name "*.a" | xargs tar czfv out/static-libs.2.tgz && \
            cp crossgcc/x86_64-linux-musl/lib64/libstdc++.a out/libstdc++.2.a && \
            tar czfv out/install.2.tgz install && \
            tar czfv all_together.tgz out \

      - store-artifacts:
          path: all_together.tgz

#     - run:
#         name: x230-nkstorecli
#         command: |
#           rm -rf build/x230-nkstorecli/* build/log/* && make --load 2 \
#               V=1 \
#               BOARD=x230-nkstorecli \
#         no_output_timeout: 3h
#     - run:
#         name: Ouput x230-nkstorecli hashes
#         command: |
#           cat build/x230-nkstorecli/hashes.txt \
#     - run:
#         name: Archiving build logs for x230-nkstorecli
#         command: |
#            tar zcvf build/x230-nkstorecli/logs.tar.gz build/log/*
#     - store-artifacts:
#         path: build/x230-nkstorecli
#     - store-artifacts:
#         path: crossgcc/x86_64-linux-musl/lib64/libstdc++.a


      - run:
          name: qemu-coreboot
          command: |
            rm -rf build/qemu-coreboot/* build/log/* && make --load 2 \
                V=1 \
                BOARD=qemu-coreboot \
          no_output_timeout: 3h
      - run:
          name: Output qemu-coreboot hashes
          command: |
             cat build/qemu-coreboot/hashes.txt \
      - run:
          name: Archiving build logs for qemu-coreboot
          command: |
             tar zcvf build/qemu-coreboot/logs.tar.gz build/log/*
      - store-artifacts:
          path: build/qemu-coreboot

      - save_cache:
          #Generate cache for the same musl-cross module definition if hash is not previously existing
          key: heads-cross-musl-{{ checksum "/tmp/musl-cross_module_and_patches.sha256sums" }}{{ .Environment.CACHE_VERSION }}
          paths:
            - crossgcc
            - build/musl-cross-*

      - save_cache:
          #Generate cache for the exact same modules definitions if hash is not previously existing
          key: heads-modules-and-patches-{{ checksum "/tmp/all_modules_and_patches.sha256sums" }}{{ .Environment.CACHE_VERSION }}
          paths:
            - packages
            - crossgcc
            - build
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
